# Due to the dependency on encrypted variables, this will only work in a
# specific repo
# only_if: $CIRRUS_REPO_OWNER == 'anarazel' && $CIRRUS_REPO_NAME == 'pg-vm-images'

env:
  CIRRUS_LOG_TIMESTAMP: true

  # See gcp_project_setup.txt for setup instructions
  GCP_PROJECT_MAIN: pg-ci-images-dev
  GCP_PROJECT_DEV: pg-ci-images-dev

  # the following variables are chosen in .cirrus.star, based on the branch
  # being built etc
  # BRANCH_TYPE = dev|main
  # GCP_PROJECT = $GCP_PROJECT_MAIN or $GCP_PROJECT_DEV
  # GCP_REGION
  # GCP_REPO


# central definition for the tasks interacting with gcp

# shared gcp auth
gcp_auth: &gcp_auth
  env:
    # image-builder@pg-ci-images-dev.iam.gserviceaccount.com
    GAC_DEV: ENCRYPTED[9fdce2b90220308f7593bbc42488da4cde8fdb25044e92d9c096147bac5deef667210d92dc9a51b173c3f04c2d6c9383]
    # image-builder@pg-ci-images.iam.gserviceaccount.com
    GAC_MAIN: ENCRYPTED[9fdce2b90220308f7593bbc42488da4cde8fdb25044e92d9c096147bac5deef667210d92dc9a51b173c3f04c2d6c9383]

# gcp auth for unixoid systems
gcp_auth_unix: &gcp_auth_unix
  <<: *gcp_auth

  env:
    GOOGLE_APPLICATION_CREDENTIALS: /gcp-service-account-${BRANCH_TYPE}.json

  gcp_main_key_file:
    path: /gcp-service-account-main.json
    variable_name: GAC_MAIN

  gcp_dev_key_file:
    path: /gcp-service-account-dev.json
    variable_name: GAC_DEV

  gcp_auth_script:
    - gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
    - gcloud auth list

# gcp auth for windows
gcp_auth_win: &gcp_auth_win
  <<: *gcp_auth

  env:
    GOOGLE_APPLICATION_CREDENTIALS: c:/gcp-service-account-%BRANCH_TYPE%.json

  gcp_main_key_file:
    path: c:/gcp-service-account-main.json
    variable_name: GAC_MAIN

  gcp_dev_key_file:
    path: c:/gcp-service-account-dev.json
    variable_name: GAC_DEV

  gcp_auth_script:
    - gcloud auth activate-service-account --key-file=%GOOGLE_APPLICATION_CREDENTIALS%
    - gcloud auth list

# docker->gcp auth for unixoid systems
gcp_docker_auth_unix: &gcp_docker_auth_unix
  <<: *gcp_auth_unix
  gcp_docker_auth_script:
    - gcloud auth configure-docker --quiet $GCP_REGION-docker.pkg.dev

# docker->gcp  auth for windows systems
gcp_docker_auth_win: &gcp_docker_auth_win
  <<: *gcp_auth_win
  gcp_docker_auth_script:
    - gcloud auth configure-docker --quiet %GCP_REGION%-docker.pkg.dev

docker_builder:
  name: build-containers-windows

  platform: windows
  os_version: 2019

  skip: $CIRRUS_LAST_GREEN_CHANGE != '' && $CIRRUS_CRON != 'regular-rebuild' && !changesInclude('.cirrus.yml', 'docker/docker/windows_*', 'scripts/windows*')

  <<: *gcp_docker_auth_win

  build_script: |
    docker pull %GCP_REPO%/windows_ci_base:latest || cmd /s /c
    docker build --cache-from %GCP_REPO%/windows_ci_base:latest --cache-from docker.io/cirrusci/windowsservercore:2019-2021.12.07 --tag windows_ci_base:latest -f docker/windows_ci_base .
    docker tag windows_ci_base:latest %GCP_REPO%/windows_ci_base:latest
    docker push %GCP_REPO%/windows_ci_base:latest

    docker pull %GCP_REPO%/windows_ci_mingw64:latest || cmd /s /c
    docker build --cache-from %GCP_REPO%/windows_ci_mingw64:latest --tag windows_ci_mingw64:latest -f docker/windows_ci_mingw64 .
    docker tag windows_ci_mingw64:latest %GCP_REPO%/windows_ci_mingw64:latest
    docker push %GCP_REPO%/windows_ci_mingw64:latest


task:
  name: test-windows-container-mingw64-amd64
  depends_on:
    - build-containers-windows
  windows_container:
    image: $GCP_REPO/windows_ci_mingw64:latest
  test_script:
    - ver
    - set
    - C:\msys64\usr\bin\bash.exe -lc 'where perl'
    - C:\msys64\usr\bin\bash.exe -lc 'where python'
    - C:\msys64\usr\bin\bash.exe -lc 'perl --version'
    - C:\msys64\usr\bin\bash.exe -lc 'bison --version'
    - C:\msys64\usr\bin\bash.exe -lc 'flex --version'
